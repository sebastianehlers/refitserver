@page "/weather"

@using Contract.Services.WeatherForecast
@using Contract.Services.WeatherForecast.Models

@inject IWeatherForecastService WeatherForecastService

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

<h2>The weather in Rødovre is: @_singleForecast?.TemperatureC</h2>

@if (_forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in _forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? _forecasts;

    private WeatherForecastDto _singleForecast;
    
    protected override async Task OnInitializedAsync()
    {
        var result = await WeatherForecastService.GetForecastsForCountry(22, "This is search query");
        _forecasts = result.Select(forecast => new WeatherForecast
        {
            Date = forecast.Date,
            Summary = forecast.Summary,
            TemperatureC = forecast.TemperatureC
        }).ToArray();

        _singleForecast = await WeatherForecastService.GetSingleForecastById(223);
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}